<?php declare(strict_types=1);

/**
 * Example API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace Generated\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use Generated\Http\Controllers\AuthApiInterface;

class AuthController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly AuthApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation loginUser
     *
     * Вход пользователя (Sanctum SPA).
     *
     */
    public function loginUser(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $loginUser = $this->serde->deserialize($request->getContent(), from: 'json', to: \Generated\DTO\LoginUser::class);

        try {
            $apiResult = $this->api->loginUser($loginUser);
        } catch (\Exception $exception) {
            // This shouldn't happen
            report($exception);
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \Generated\DTO\ValidationError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent419) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 419);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent429) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 429);
        }

        if ($apiResult instanceof \Generated\DTO\Error) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation registerUser
     *
     * Регистрация нового пользователя (Sanctum SPA).
     *
     */
    public function registerUser(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $registerUser = $this->serde->deserialize($request->getContent(), from: 'json', to: \Generated\DTO\RegisterUser::class);

        try {
            $apiResult = $this->api->registerUser($registerUser);
        } catch (\Exception $exception) {
            // This shouldn't happen
            report($exception);
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \Generated\DTO\RegisterResponse) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \Generated\DTO\ValidationError) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \Generated\DTO\NoContent419) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 419);
        }

        if ($apiResult instanceof \Generated\DTO\Error) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 500);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
